class Board:
    def __init__(self):
        self.grid = [
            [" ", "B", " ", "B", " ", "B", " ", "B"],
            ["B", " ", "B", " ", "B", " ", "B", " "],
            [" ", "B", " ", "B", " ", "B", " ", "B"],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            ["R", " ", "R", " ", "R", " ", "R", " "],
            [" ", "R", " ", "R", " ", "R", " ", "R"],
            ["R", " ", "R", " ", "R", " ", "R", " "],
        ]
        
    def move(self, start_row, start_col, end_row, end_col):
        piece = self.grid[start_row][start_col]
        self.grid[start_row][start_col] = " "
        self.grid[end_row][end_col] = piece
        if abs(start_row - end_row) == 2:
            self.grid[(start_row + end_row) // 2][(start_col + end_col) // 2] = " "
        
    def __str__(self):
        return "\n".join(["|".join(row) for row in self.grid])
    

class Game:
    def __init__(self):
        self.board = Board()
        self.current_player = "R"
        self.winner = None
        
    def is_legal_move(self, start_row, start_col, end_row, end_col):
        if self.board.grid[end_row][end_col] != " ":
            return False
        piece = self.board.grid[start_row][start_col]
        if piece == " ":
            return False
        if piece == "R":
            if end_row > start_row:
                return False
            if abs(start_row - end_row) == 2 and abs(start_col - end_col) == 2:
                if self.board.grid[(start_row + end_row) // 2][(start_col + end_col) // 2] != "B":
                    return False
            else:
                if end_row != start_row - 1 or abs(start_col - end_col) != 1:
                    return False
        elif piece == "B":
            if end_row < start_row:
                return False
            if abs(start_row - end_row) == 2 and abs(start_col - end_col) == 2:
                if self.board.grid[(start_row + end_row) // 2][(start_col + end_col) // 2] != "R":
                    return False
            else:
                if end_row != start_row + 1 or abs(start_col - end_col) != 1:
                    return False
        return True
        
    def switch_player(self):
        if self.current_player == "R":
            self.current_player = "B"
        else:
            self.current_player = "R"
        
    def check_for_winner(self):
        red_count = 0
        black_count = 0
        for row in self.board.grid:
            for piece in row:
                if piece == "R":
                    red_count += 1
                elif piece == "B":
                    black_count += 1
        if red_count == 0:
            self.winner = "Black"
        elif black_count == 0:
            self.winner = "Red
